server:
  port: 9009

spring:
  application:
    name: qingyin-gateway
  profiles:
    active: dev
  main:
    # gateway组件中的 spring-boot-starter-webflux 和
    # springboot作为web项目启动必不可少的 spring-boot-starter-web 出现冲突。
    # 直接排除
    web-application-type: reactive
    allow-circular-references: true # 允许循环依赖，因为项目是三层架构，无法避免这个情况。

  cloud:
    nacos:
      discovery:
        enabled: true
        username: nacos
        password: nacos
        server-addr: 127.0.0.1:8848
        namespace: 2636c16a-f8a7-48c5-974c-7a712fc0db95

  # Redis配置
  redis:
    host: localhost   # Redis服务地址
    port: 6379        # Redis端口
    password: 123456  # Redis密码
    database: 0       # 数据库索引
    timeout: 5000     # 连接超时
    lettuce:
      pool:
        max-wait: 30000 # 连接池最大阻塞等待时间(使用负数表示没有限制,默认-1)
        max-active: 100 # 连接池最大连接数(使用负数表示没有限制,默认8)
        max-idle: 20    # 连接池中的最大空闲连接(默认8)
        min-idle: 0     # 连接池中的最小空闲连接(默认0)


    # 静态路由
  #    gateway:
  #      routes:
  #        - id: path_route # 路由的ID
  #          uri: 127.0.0.1:8080/user/{id} # 匹配后路由地址
  #          predicates: # 断言, 路径相匹配的进行路由
  #            - Path=/user/{id}


# 这个地方独立配置, 是网关的数据, 代码 GatewayConfig.java 中读取被监听
nacos:
  gateway:
    route:
      config:
        data-id: qingyin-gateway-router
        group: qingyin

# 忽略校验路径
validate:
  skips:
    paths:
      - '/qingyin-rpc-api/authority/register'
      - '/qingyin-rpc-api/authority/token'
      - '/qingyin-rpc-api/**/v3/api-docs'


feign:
  # 不使用httpclient，改用okhttp
  httpclient:
    enabled: false
  okhttp:
    enabled: true
    # 是否禁用重定向
    follow-redirects: true
    connect-timeout: 5000
    # 链接失败是否重试
    retry-on-connection-failure: true
    read-timeout: 5000
    write-timeout: 5000
    # 最大空闲数量
    max-idle-connections: 5
    # 生存时间
    keep-alive-duration: 15000
  # 开启压缩功能
  compression:
    request:
      enabled: true
      mime-types: text/xml,application/xml,application/json
      min-request-size: 2048
    response:
      enabled: true

knife4j:
  gateway:
    # 是否开启
    enabled: true
    # 排序规则(tag/operation排序自4.2.0版本新增)
    # 取值：alpha-默认排序规则，官方swagger-ui默认实现,order-Knife4j提供的增强排序规则，开发者可扩展x-order，根据数值来自定义排序
    tags-sorter: order
    operations-sorter: order
    # 指定服务发现的模式聚合微服务文档，并且是默认`default`分组
    # 这是手动模式的，需要指定url，注意 url 和 context-path 这2个值的填写
    #    strategy: manual
    #    routes:
    #      - name: 认证服务
    #        # 真实通过网关访问子服务接口文档的uri地址：
    #        # /v3/api-docs?group=default是固定值，
    #        # /oauth2 是微服务的 context-path
    #        # /gateway 是我在网关路由断言中自定义添加的，可以是/api等其他的，如果没有，这一层可以不用
    #        url: /gateway/oauth2/v3/api-docs?group=default
    #        service-name: oauth2-server
    #        # 路由前缀
    #        # 这个值在V3版本中，界面中调试时添加到微服务中uri前面的，一般和上面url前面部分相同
    #        context-path: /gateway/oauth2
    #        order: 1
    # 自动发现模式，读取nacos注册中心里的微服务
    strategy: discover
    discover:
      enabled: true
      # 指定版本号(Swagger2|OpenAPI3)
      version : openapi3
      # 需要排除的微服务(eg:网关服务)
      excluded-services:
        - qingyin-gateway
        - qingyin-authority-provider
      # 各个聚合服务的个性化配置，key:注册中心中的服务名称，value：个性化配置
      service-config:
        qingyin-account-provider:
          # 排序
          order: 1
          # 前端显示名称
          group-name : 会员服务
          # 重新指定basePath，一般在OpenAPI3规范中需要
          context-path: /qingyin-rpc-api/account/


# 日志文件配置
logging:
  level:
    org.springframework.context.support.PostProcessorRegistrationDelegate: ERROR
  file:
    name: ${user.home}/logs/${spring.application.name}.log # 日志文件名，全路径